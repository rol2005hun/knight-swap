package knightswap.gui.controllers;

import javafx.beans.property.ReadOnlyObjectWrapper;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import knightswap.data.PlayerScore;
import knightswap.data.ScoreBoardManager;
import knightswap.utils.GuiUtils;
import org.tinylog.Logger;

import java.util.List;

/**
 * Controller class for the Leaderboard screen of the Knight Swap application.
 * This controller is responsible for displaying a list of top player scores
 * in a tabular format. It retrieves score data from the {@link ScoreBoardManager}
 * and populates a {@link TableView} with player names, scores, and dynamically
 * calculated ranks. It also handles the closing of the leaderboard window,
 * ensuring a smooth return to the main game screen while preserving its state.
 */
public class LeaderBoardController {
    @FXML
    private TableView<PlayerScore> leaderboardTable;
    @FXML
    private TableColumn<PlayerScore, Integer> rankColumn;
    @FXML
    private TableColumn<PlayerScore, String> nameColumn;
    @FXML
    private TableColumn<PlayerScore, Integer> scoreColumn;

    private Stage gameStage;

    private final ObservableList<PlayerScore> scores = FXCollections.observableArrayList();

    /**
     * Default constructor for the {@code LeaderBoardController}.
     * This constructor is automatically called by the FXML loader when
     * instantiating the controller for the leaderboard screen.
     */
    public LeaderBoardController() {}

    /**
     * Sets the {@link javafx.stage.Stage} of the game screen that this
     * leaderboard window is associated with. This stage will be made visible again
     * when the leaderboard screen is closed.
     *
     * @param gameStage The {@link javafx.stage.Stage} instance of the main game board.
     */
    public void setGameStage(Stage gameStage) {
        this.gameStage = gameStage;
    }

    /**
     * Initializes the controller after its root element has been completely processed.
     * This method is automatically called by the FXML loader.
     * It sets up the cell value factories for each column in the {@link #leaderboardTable},
     * configures sorting, and loads the player scores.
     */
    @FXML
    private void initialize() {
        rankColumn.setCellValueFactory(param -> {
            int currentRank = 1;
            int previousScore = -1;

            ObservableList<PlayerScore> items = param.getTableView().getItems();

            for (int i = 0; i < items.size(); i++) {
                PlayerScore currentItem = items.get(i);

                if (i > 0) {
                    if (currentItem.getBestScore() != previousScore) {
                        currentRank++;
                    }
                }

                previousScore = currentItem.getBestScore();

                if (currentItem == param.getValue()) {
                    return new ReadOnlyObjectWrapper<>(currentRank);
                }
            }
            return new ReadOnlyObjectWrapper<>(0);
        });
        GuiUtils.setCenteredCellFactory(rankColumn);

        nameColumn.setCellValueFactory(new PropertyValueFactory<>("playerName"));
        GuiUtils.setCenteredCellFactory(nameColumn);


        scoreColumn.setCellValueFactory(new PropertyValueFactory<>("bestScore"));
        GuiUtils.setCenteredCellFactory(scoreColumn);

        leaderboardTable.getSortOrder().add(scoreColumn);
        scoreColumn.setSortType(TableColumn.SortType.ASCENDING);

        loadScores();
    }

    /**
     * Loads player scores into the {@link #scores} ObservableList from the
     * {@link ScoreBoardManager} and sets them as the items for the {@link #leaderboardTable}.
     * This method clears any existing scores before loading the top 100 scores
     * from the JSON file.
     */
    private void loadScores() {
        scores.clear();

        List<PlayerScore> topScores = ScoreBoardManager.getTopScores(100);
        scores.addAll(topScores);

        leaderboardTable.setItems(scores);
        Logger.info("Leaderboard scores loaded successfully. Ranks calculated dynamically.");
    }

    /**
     * Handles the action when the "Close" button on the leaderboard screen is clicked.
     * This method closes the current leaderboard window. If a reference to the main game
     * screen's stage exists, it will be re-shown, preserving the game's state.
     * As a fallback, if the game stage reference is lost, a new game screen will be opened.
     *
     * @param event The {@link javafx.event.ActionEvent} generated by the button click.
     */
    @FXML
    private void handleCloseButton(ActionEvent event) {
        Stage helpStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        helpStage.close();
        Logger.info("Leaderboard closed.");

        if (gameStage != null) {
            gameStage.show();
            Logger.info("Returned to main game screen (state preserved).");
        } else {
            GuiUtils.loadChessboardFallback(getClass());
        }
    }
}
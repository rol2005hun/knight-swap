package knightswap.gui.controllers;

import javafx.fxml.FXML;
import javafx.scene.control.TextArea;
import javafx.fxml.Initializable;
import javafx.stage.Stage;
import javafx.scene.Node;
import javafx.event.ActionEvent;
import knightswap.util.GuiUtils;
import org.tinylog.Logger;

import java.net.URL;
import java.util.ResourceBundle;

/**
 * Controller class for the Help screen of the Knight Swap application.
 * This controller manages the display of the game's solution steps and
 * handles the closing of the help window, ensuring a smooth return to the
 * main game screen while preserving its state.
 */
public class HelpController implements Initializable {
    @FXML
    private TextArea solutionStepsTextArea;

    private Stage gameStage;

    /**
     * Default constructor for the {@code HelpController}.
     * This constructor is automatically called by the FXML loader when
     * instantiating the controller for the help screen.
     */
    public HelpController() {}

    /**
     * Sets the {@link javafx.stage.Stage} of the game screen that this
     * help window is associated with. This stage will be made visible again
     * when the help screen is closed.
     *
     * @param gameStage The {@link javafx.stage.Stage} instance of the main game board.
     */
    public void setGameStage(Stage gameStage) {
        this.gameStage = gameStage;
    }

    /**
     * Initializes the controller after its root element has been completely processed.
     * This method is automatically called by the FXML loader.
     * It sets the predefined solution steps into the text area for display.
     *
     * @param url The location used to resolve relative paths for the root object, or null if the location is not known.
     * @param rb The resources used to localize the root object, or null if the root object was not localized.
     */
    @Override
    public void initialize(URL url, ResourceBundle rb) {
        String solution = """
            (3, 0) -> (1, 1)
            (0, 1) -> (2, 2)
            (3, 2) -> (2, 0)
            (0, 0) -> (2, 1)
            (3, 1) -> (1, 2)
            (0, 2) -> (1, 0)
            (1, 1) -> (3, 2)
            (2, 1) -> (0, 2)
            (1, 2) -> (0, 0)
            (2, 2) -> (3, 0)
            (2, 0) -> (1, 2)
            (1, 0) -> (2, 2)
            (3, 2) -> (2, 0)
            (0, 2) -> (1, 0)
            (0, 0) -> (2, 1)
            (3, 0) -> (1, 1)
            (1, 2) -> (0, 0)
            (1, 0) -> (3, 1)
            (2, 1) -> (0, 2)
            (2, 2) -> (3, 0)
            (2, 0) -> (0, 1)
            (1, 1) -> (3, 2)
        """;
        solutionStepsTextArea.setText(solution.trim());
    }

    /**
     * Handles the action when the "Close" button on the help screen is clicked.
     * This method closes the current help window. If a reference to the main game
     * screen's stage exists, it will be re-shown, preserving the game's state.
     * As a fallback, if the game stage reference is lost, a new game screen will be opened.
     *
     * @param event The {@link javafx.event.ActionEvent} generated by the button click.
     */
    @FXML
    private void handleCloseButton(ActionEvent event) {
        Stage helpStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        helpStage.close();
        Logger.info("Help screen closed.");

        if (gameStage != null) {
            gameStage.show();
            Logger.info("Returned to main game screen (state preserved).");
        } else {
            GuiUtils.loadChessboardFallback(getClass());
        }
    }
}
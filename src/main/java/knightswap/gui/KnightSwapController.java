package knightswap.gui;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.GridPane;
import javafx.scene.text.Font;
import org.tinylog.Logger;

import knightswap.KnightSwapState;
import knightswap.util.PieceType;
import knightswap.util.Position;

import java.util.HashMap;
import java.util.Map;

/**
 * Controller class for the KnightSwap game board GUI.
 * Manages user interactions with the chessboard,
 * displays the game state, and communicates with the KnightSwapState logic.
 */
public class KnightSwapController {
    @FXML private Label currentScoreLabel;
    @FXML private Label bestScoreLabel;
    @FXML private Label statusLabel;
    @FXML private Button button00;
    @FXML private Button button01;
    @FXML private Button button02;
    @FXML private Button button10;
    @FXML private Button button11;
    @FXML private Button button12;
    @FXML private Button button20;
    @FXML private Button button21;
    @FXML private Button button22;
    @FXML private Button button30;
    @FXML private Button button31;
    @FXML private Button button32;

    private String playerName;
    private Button[][] buttons;
    private Button firstClickButton = null;
    private Position firstClickPosition = null;

    private KnightSwapState gameState;

    private final Map<Button, String> originalStyles = new HashMap<>();

    private static final String DARK_SQUARE_STYLE = "-fx-background-color: #A0522D; -fx-background-radius: 0;";
    private static final String LIGHT_SQUARE_STYLE = "-fx-background-color: #FFF8DC; -fx-background-radius: 0;";
    private static final String HIGHLIGHT_STYLE = "-fx-background-color: #6B4226; -fx-background-radius: 0; -fx-border-color: yellow; -fx-border-width: 2;";

    /**
     * Public constructor to prevent instantiation of this utility class.
     * This class contains only static methods and should not be instantiated.
     */
    public KnightSwapController() {}

    /**
     * Initializes the controller after its root element has been completely processed.
     * This method is automatically called by the FXML loader.
     */
    @FXML
    public void initialize() {
        gameState = new KnightSwapState();

        buttons = new Button[][] {
                { button00, button01, button02 },
                { button10, button11, button12 },
                { button20, button21, button22 },
                { button30, button31, button32 }
        };

        for (int row = 0; row < 4; row++) {
            for (int col = 0; col < 3; col++) {
                Button btn = buttons[row][col];
                btn.setFont(Font.font(45));

                btn.setOnAction(this::handleButtonClick);

                if ((row + col) % 2 == 0) {
                    originalStyles.put(btn, DARK_SQUARE_STYLE);
                } else {
                    originalStyles.put(btn, LIGHT_SQUARE_STYLE);
                }
            }
        }

        updateBoard();
        updateStatusLabel();
    }

    /**
     * Handles button click events on the chessboard.
     * Manages the two-click move selection logic (first click selects piece, second click attempts move).
     *
     * @param event The ActionEvent generated by the button click.
     */
    @FXML
    private void handleButtonClick(ActionEvent event) {
        Button clickedButton = (Button) event.getSource();
        int clickedRow = GridPane.getRowIndex(clickedButton) == null ? 0 : GridPane.getRowIndex(clickedButton);
        int clickedCol = GridPane.getColumnIndex(clickedButton) == null ? 0 : GridPane.getColumnIndex(clickedButton);
        Position clickedPosition = new Position(clickedRow, clickedCol);

        Logger.debug("Button clicked at ({}, {})", clickedRow, clickedCol);

        if (firstClickButton == null) {
            char pieceAtClickedPos = gameState.getPieceAt(clickedRow, clickedCol);

            if ((gameState.getCurrentPlayer() == PieceType.LIGHT && pieceAtClickedPos == PieceType.LIGHT.getSymbol()) ||
                    (gameState.getCurrentPlayer() == PieceType.DARK && pieceAtClickedPos == PieceType.DARK.getSymbol())) {

                firstClickButton = clickedButton;
                firstClickPosition = clickedPosition;
                firstClickButton.setStyle(HIGHLIGHT_STYLE);
                statusLabel.setText("Selected: (" + clickedRow + ", " + clickedCol + "). Choose target.");
                Logger.info("Piece selected at ({}, {}). Current player: {}", clickedRow, clickedCol, gameState.getCurrentPlayer());
            } else if (pieceAtClickedPos == '.') {
                statusLabel.setText("Empty square! Select a piece.");
                Logger.warn("Clicked on empty square at ({}, {}). No piece selected.", clickedRow, clickedCol);
            } else {
                statusLabel.setText("Not your piece! (" + gameState.getCurrentPlayer() + " to move)");
                Logger.warn("Clicked on opponent's piece ({}) at ({}, {}).", pieceAtClickedPos, clickedRow, clickedCol);
            }
        } else {
            if (clickedButton == firstClickButton) {
                firstClickButton.setStyle(originalStyles.get(firstClickButton));
                firstClickButton = null;
                firstClickPosition = null;
                statusLabel.setText("Selection cancelled.");
                Logger.info("Selection at ({}, {}) cancelled.", clickedRow, clickedCol);
            }
            else {
                String moveString = String.format("%d %d %d %d",
                        firstClickPosition.row(), firstClickPosition.col(),
                        clickedPosition.row(), clickedPosition.col());

                if (gameState.isLegalMove(moveString)) {
                    gameState.makeMove(moveString);
                    Logger.info("Move made: {}.", moveString);

                    firstClickButton.setStyle(originalStyles.get(firstClickButton));
                    firstClickButton = null;
                    firstClickPosition = null;

                    updateBoard();
                    updateStatusLabel();

                    if (gameState.isSolved()) {
                        statusLabel.setText("Congratulations! Puzzle solved.");
                        Logger.info("KnightSwap puzzle solved!");
                        disableAllButtons();
                    }
                } else {
                    Logger.warn("Illegal move attempted from ({}, {}) to ({}, {}).",
                            firstClickPosition.row(), firstClickPosition.col(),
                            clickedRow, clickedCol);
                    statusLabel.setText("Invalid move! Try again.");
                    firstClickButton.setStyle(originalStyles.get(firstClickButton));
                    firstClickButton = null;
                    firstClickPosition = null;
                }
            }
        }
    }

    /**
     * Resets the game board to its initial state.
     * This method is typically called when the "Reset" button is clicked.
     */
    @FXML
    private void handleResetButton() {
        gameState = new KnightSwapState();
        firstClickButton = null;
        firstClickPosition = null;

        enableAllButtons();

        updateBoard();
        updateStatusLabel();
        Logger.info("Game board reset is successful.");
    }

    /**
     * Updates the visual representation of the board based on the current game state.
     * Sets the text (piece symbol) and resets the background style of each button.
     */
    private void updateBoard() {
        for (int row = 0; row < 4; row++) {
            for (int col = 0; col < 3; col++) {
                char pieceChar = gameState.getPieceAt(row, col);
                String pieceSymbol;

                if (pieceChar == PieceType.LIGHT.getSymbol()) {
                    pieceSymbol = "♘";
                } else if (pieceChar == PieceType.DARK.getSymbol()) {
                    pieceSymbol = "♞";
                } else {
                    pieceSymbol = "";
                }
                buttons[row][col].setText(pieceSymbol);
                buttons[row][col].setStyle(originalStyles.get(buttons[row][col]));
            }
        }

        if (firstClickButton != null) {
            firstClickButton.setStyle(HIGHLIGHT_STYLE);
        }
    }

    /**
     * Updates the status label with information about the current player's turn.
     * Also checks if the game is solved and updates the label accordingly.
     */
    private void updateStatusLabel() {
        if (gameState.isSolved()) {
            statusLabel.setText("Congratulations! Puzzle solved.");
        } else {
            statusLabel.setText(String.format("%s to move.", gameState.getCurrentPlayer() == PieceType.LIGHT ? "Light" : "Dark"));
        }
    }

    /**
     * Disables all buttons on the board.
     * Useful when the puzzle is solved.
     */
    private void disableAllButtons() {
        for (int row = 0; row < 4; row++) {
            for (int col = 0; col < 3; col++) {
                buttons[row][col].setDisable(true);
            }
        }
    }

    /**
     * Enables all buttons on the board.
     * Useful when resetting the puzzle after it was solved.
     */
    private void enableAllButtons() {
        for (int row = 0; row < 4; row++) {
            for (int col = 0; col < 3; col++) {
                buttons[row][col].setDisable(false);
            }
        }
    }

    /**
     * Sets the player name.
     * @param name The given player name by the user.
     */
    public void setPlayerName(String name) {
        this.playerName = name;
    }
}
package knightswap.gui;

import javafx.beans.property.ReadOnlyObjectWrapper;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import knightswap.data.PlayerScore;
import knightswap.data.ScoreBoardManager;
import org.tinylog.Logger;

import java.io.IOException;
import java.util.List;

/**
 * Controller for the Leaderboard screen.
 * Displays the best scores of players.
 */
public class LeaderBoardController {
    @FXML
    private TableView<PlayerScore> leaderboardTable;
    @FXML
    private TableColumn<PlayerScore, Integer> rankColumn;
    @FXML
    private TableColumn<PlayerScore, String> nameColumn;
    @FXML
    private TableColumn<PlayerScore, Integer> scoreColumn;

    private Stage gameStage;

    private final ObservableList<PlayerScore> scores = FXCollections.observableArrayList();

    public void setGameStage(Stage gameStage) {
        this.gameStage = gameStage;
    }

    /**
     * Initializes the controller after its root element has been completely processed.
     * Sets up the TableView columns and loads scores.
     */
    @FXML
    private void initialize() {
        rankColumn.setCellValueFactory(param -> {
            int currentRank = 1;
            int previousScore = -1;

            ObservableList<PlayerScore> items = param.getTableView().getItems();

            for (int i = 0; i < items.size(); i++) {
                PlayerScore currentItem = items.get(i);

                if (i > 0) {
                    if (currentItem.getBestScore() != previousScore) {
                        currentRank++;
                    }
                }

                previousScore = currentItem.getBestScore();

                if (currentItem == param.getValue()) {
                    return new ReadOnlyObjectWrapper<>(currentRank);
                }
            }
            return new ReadOnlyObjectWrapper<>(0);
        });
        nameColumn.setCellValueFactory(new PropertyValueFactory<>("playerName"));
        scoreColumn.setCellValueFactory(new PropertyValueFactory<>("bestScore"));

        leaderboardTable.getSortOrder().add(scoreColumn);
        scoreColumn.setSortType(TableColumn.SortType.ASCENDING);

        loadScores();
    }

    /**
     * Loads scores into the TableView from the JSON file.
     */
    private void loadScores() {
        scores.clear();

        List<PlayerScore> topScores = ScoreBoardManager.getTopScores(100);
        scores.addAll(topScores);

        leaderboardTable.setItems(scores);
        Logger.info("Leaderboard scores loaded successfully. Ranks calculated dynamically.");
    }

    /**
     * Handles the action when the "Close" button is clicked.
     * Closes the leaderboard screen window.
     * @param event The ActionEvent generated by the button click.
     */
    @FXML
    private void handleCloseButton(ActionEvent event) {
        Stage helpStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        helpStage.close();
        Logger.info("Leaderboard closed.");

        if (gameStage != null) {
            gameStage.show();
            Logger.info("Returned to main game screen (state preserved).");
        } else {
            Logger.warn("Main game stage reference was null in HelpController. This should not happen.");
            try {
                FXMLLoader loader = new FXMLLoader(getClass().getResource("/chessboard.fxml"));
                if (loader.getLocation() == null) {
                    Logger.error("ERROR: 'chessboard.fxml' resource not found at /chessboard.fxml during fallback. " +
                            "Check path and build configuration.");
                    return;
                }
                Parent root = loader.load();
                Stage newGameStage = new Stage();
                newGameStage.setScene(new Scene(root));
                newGameStage.setTitle("Knight Swap Game");
                newGameStage.show();
                Logger.info("A new game screen was opened (fallback due to null gameStage).");
            } catch (IOException e) {
                Logger.error("Failed to load 'chessboard.fxml' from LeaderBoardController fallback: {}", e.getMessage());
            }
        }
    }
}